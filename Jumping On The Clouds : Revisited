using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the jumpingOnClouds function below.
    static int jumpingOnClouds(int[] c, int k) {
    
      //One line code, except one test cases all are working this is because it only works Where n%k ==0. 
      //As it doesn't allow the repetition of the same elemnt twice. Thus ends after iterating over the clouds array for once.
      //return 100 - (c.Length/k + (c.Where((v, i) => i % k == 0).Sum() * 2));
      
      int position = 0;
      int n = c.Length;
      int energy = 100;
      
      while(true){
          position = position + k;
          position = position % n;
          if(c[position] == 1){
              energy = energy - 2;
          }

            energy = energy - 1;

          if(position == 0){
              break;
          }
      }
      
      return energy;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] nk = Console.ReadLine().Split(' ');

        int n = Convert.ToInt32(nk[0]);

        int k = Convert.ToInt32(nk[1]);

        int[] c = Array.ConvertAll(Console.ReadLine().Split(' '), cTemp => Convert.ToInt32(cTemp))
        ;
        int result = jumpingOnClouds(c, k);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
